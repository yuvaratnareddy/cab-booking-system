-- ----------------------------------------
-- 1. CUSTOMER AND BOOKING ANALYSIS
-- ----------------------------------------

-- Q1.1: Identify customers who have completed the most bookings.
SELECT C.Name AS FullName, COUNT(*) AS CompletedBookings
FROM Customers C JOIN Bookings B ON C.CustomerID = B.CustomerID
WHERE B.Status = 'Completed'
GROUP BY C.Name
ORDER BY CompletedBookings DESC
LIMIT 5;
-- Insight: Identifies loyal/high-value customers.
-- Solution: Offer rewards, discounts, personalized promotio

-- Q1.2: Find customers who have canceled more than 30% of their total bookings.
SELECT C.Name AS FullName,
    COUNT(CASE WHEN B.Status = 'Cancelled' THEN 1 END) AS CancelledTrips,
    COUNT(*) AS TotalTrips,
    ROUND(COUNT(CASE WHEN B.Status = 'Cancelled' THEN 1 END) * 100.0 / COUNT(*), 2) AS CancellationRatePct
FROM Customers C inner JOIN Bookings B ON C.CustomerID = B.CustomerID
GROUP BY C.Name
HAVING COUNT(*) > 3 AND CancellationRatePct > 30.0
ORDER BY CancellationRatePct DESC;
-- Insight: Shows dissatisfied or indecisive users.
-- Solution: Investigate reasons, improve booking flexibility, send reminders.

-- Q1.3: Determine the busiest day of the week for bookings.
SELECT DAYNAME(BookingDate) AS DayOfWeek, COUNT(BookingID) AS TotalBookings
FROM Bookings
GROUP BY DayOfWeek
ORDER BY TotalBookings DESC
LIMIT 1;
-- Insight: Peak demand days/times.
-- Solution: Increase driver availability, dynamic pricing during peaks.

-- 2. DRIVER PERFORMANCE & EFFICIENCY
-- Q2.1: Identify drivers who have received an average rating below 3.0 in the past three months.
SELECT D.Name AS FullName, ROUND(AVG(F.DriverRating), 2) AS AvgRating
FROM Drivers D
JOIN Bookings B ON D.DriverID = B.DriverID
JOIN TripDetails TD ON B.BookingID = TD.BookingID
JOIN Feedback F ON TD.TripID = F.TripID
WHERE B.Status = 'Completed' AND B.BookingDate >= DATE_SUB('2025-10-04', INTERVAL 3 MONTH) -- Using current date for relevance
GROUP BY D.Name
HAVING ROUND(AVG(F.DriverRating), 2) < 3.0
ORDER BY AvgRating ASC;
-- Insight: Poor-performing drivers affect customer experience.
-- Solution: Provide training, monitor performance, or reassign trips

-- Q2.2: Find the top 5 drivers who have completed the longest trips in terms of distance.
SELECT D.Name AS FullName, SUM(TD.DistanceKM) AS TotalDistanceKM
FROM Drivers D
JOIN Bookings B ON D.DriverID = B.DriverID
JOIN TripDetails TD ON B.BookingID = TD.BookingID
WHERE B.Status = 'Completed'
GROUP BY D.Name
ORDER BY TotalDistanceKM DESC
LIMIT 5;
-- Insight: Efficient in handling long-distance trips.
-- Solution: Reward and motivate them; optimize long-route allocation.

-- Q2.3: Identify drivers with a high percentage of canceled trips.
SELECT D.Name AS FullName,
    COUNT(CASE WHEN B.Status = 'Cancelled' THEN 1 END) AS DriverCancelledCount,
    COUNT(B.BookingID) AS TotalTripsAssigned,
    ROUND(COUNT(CASE WHEN B.Status = 'Cancelled' THEN 1 END) * 100.0 / COUNT(B.BookingID), 2) AS CancellationRatePct
FROM Drivers D
JOIN Bookings B ON D.DriverID = B.DriverID
WHERE B.DriverID IS NOT NULL
GROUP BY D.Name
HAVING COUNT(CASE WHEN B.Status = 'Cancelled' THEN 1 END) > 0 -- Show only drivers with cancellations
ORDER BY CancellationRatePct DESC
LIMIT 5;
-- Insight: Reliability issues affecting service quality.
-- Solution: Track cancellations, apply penalties, or retrain drivers.

-- 3. REVENUE & BUSINESS METRICS

-- Q3.1: Calculate the total revenue generated by completed bookings in the last 6 months (and trend).
SELECT DATE_FORMAT(BookingDate, '%Y-%m') AS RevenueMonth, SUM(Fare) AS MonthlyRevenue
FROM Bookings
WHERE Status = 'Completed' AND BookingDate >= DATE_SUB('2025-10-04', INTERVAL 6 MONTH) -- Using current date
GROUP BY RevenueMonth
ORDER BY RevenueMonth ASC;
-- Insight: Shows financial health and trends.
-- Solution: Use trends to forecast demand, plan promotions, and budget.

-- Q3.2: Identify the top 3 most frequently traveled routes based on PickupLocation and DropoffLocation.
SELECT PickupLocation, DropoffLocation, COUNT(BookingID) AS TripCount
FROM Bookings
WHERE Status = 'Completed'
GROUP BY PickupLocation, DropoffLocation
ORDER BY TripCount DESC
LIMIT 3;
-- Insight: Popular routes indicate high demand areas.
-- Solution: Deploy more cabs, optimize pricing for these routes

-- Q3.3: Determine if higher-rated drivers tend to complete more trips and earn higher fares.
SELECT D.Name AS FullName, ROUND(AVG(F.DriverRating), 2) AS AvgRating,
    COUNT(B.BookingID) AS TotalTripsCompleted, SUM(B.Fare) AS TotalEarnings
FROM Drivers D
JOIN Bookings B ON D.DriverID = B.DriverID
JOIN TripDetails TD ON B.BookingID = TD.BookingID
JOIN Feedback F ON TD.TripID = F.TripID
WHERE B.Status = 'Completed'
GROUP BY D.Name
ORDER BY AvgRating DESC, TotalEarnings DESC;
-- Insight: Higher-rated drivers often earn more and complete more trips.
-- Solution: Encourage good service; link incentives to ratings.

-- 4. OPERATIONAL EFFICIENCY & OPTIMIZATION

-- Q4.1: Analyze the average waiting time for different pickup locations.
SELECT PickupLocation, ROUND(AVG(TIMESTAMPDIFF(MINUTE, BookingDate, TripStart)), 2) AS AvgWaitingMinutes
FROM Bookings
WHERE Status = 'Completed' AND TripStart IS NOT NULL
GROUP BY PickupLocation
ORDER BY AvgWaitingMinutes DESC;
-- Insight: Delays may occur in specific areas.
-- Solution: Adjust cab allocation, reduce wait times with better routing.

-- Q4.2: Identify the most common reasons for trip cancellations. (UPDATED QUERY)
SELECT CancellationReason, COUNT(BookingID) AS Frequency
FROM Bookings
WHERE Status = 'Cancelled' AND CancellationReason IS NOT NULL
GROUP BY CancellationReason
ORDER BY Frequency DESC
LIMIT 5;
-- Insight: Pinpoints causes of cancellations (e.g., driver delay, user change).
-- Solution: Address top reasons, improve communication and booking experience.

-- Q4.3: Find out whether shorter trips (low-distance) contribute significantly to revenue.
SELECT
    CASE WHEN TD.DistanceKM < 15 THEN 'Short (<15km)' ELSE 'Long (>=15km)' END AS TripDistanceCategory,
    SUM(B.Fare) AS TotalRevenue,
    ROUND(SUM(B.Fare) * 100.0 / (SELECT SUM(Fare) FROM Bookings WHERE Status = 'Completed'), 2) AS RevenuePercentage
FROM Bookings B
JOIN TripDetails TD ON B.BookingID = TD.BookingID
WHERE B.Status = 'Completed'
GROUP BY TripDistanceCategory
ORDER BY TotalRevenue DESC;
-- Insight: Short trips may generate significant volume despite low fare.
-- Solution: Include in overall revenue strategy, optimize short-trip scheduling.

-- 5. COMPARATIVE & PREDICTIVE ANALYSIS
-- Q5.1: Compare the revenue generated from 'Sedan' and 'SUV' cabs.
SELECT C.VehicleType, SUM(B.Fare) AS TotalRevenue
FROM Cabs C JOIN Bookings B ON C.CabID = B.CabID
WHERE B.Status = 'Completed' AND C.VehicleType IN ('Sedan', 'SUV')
GROUP BY C.VehicleType
ORDER BY TotalRevenue DESC;
-- Insight: Identify most profitable cab type.
-- Solution: Adjust fleet composition, pricing, or promotions accordingly.

-- Q5.2: Predict which customers are likely to stop using the service (Churn).
SELECT C.Name AS FullName, MAX(B.BookingDate) AS LastBookingDate, COUNT(B.BookingID) AS TotalRides,
    TIMESTAMPDIFF(DAY, MAX(B.BookingDate), '2025-10-04') AS DaysSinceLastBooking -- Using current date
FROM Customers C
LEFT JOIN Bookings B ON C.CustomerID = B.CustomerID
GROUP BY C.Name
ORDER BY DaysSinceLastBooking DESC, TotalRides ASC
LIMIT 5;
-- Insight: Identify users likely to stop using service.
-- Solution: Proactive retention strategies: offers, personalized engagement, feedback surveys.

-- Q5.3: Analyze whether weekend bookings differ significantly from weekday bookings.
SELECT
    CASE WHEN DAYOFWEEK(BookingDate) IN (1, 7) THEN 'Weekend' ELSE 'Weekday' END AS DayType,
    COUNT(B.BookingID) AS TotalBookings,
    ROUND(AVG(TD.DistanceKM), 2) AS AvgDistanceKM,
    ROUND(AVG(B.Fare), 2) AS AvgFare
FROM Bookings B
LEFT JOIN TripDetails TD ON B.BookingID = TD.BookingID
WHERE B.Status = 'Completed'
GROUP BY DayType;
-- Insight: Weekend booking patterns may differ in volume, trip types, or revenue compared to weekdays
-- Solution: Adjust cab availability, pricing, and promotions based on weekday/weekend demand patterns; optimize driver shifts accordingly.
